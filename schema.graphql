
# Custom directives to specify data sources
directive @source(file: String) on OBJECT
directive @api(url: String) on OBJECT
directive @params(fields: [String!]) on OBJECT
directive @deprecated(reason: String) on FIELD_DEFINITION
directive @cached(seconds: Int) on FIELD_DEFINITION
directive @auth(requires: String) on FIELD_DEFINITION | OBJECT
directive @paginate(defaultLimit: Int = 10, maxLimit: Int = 100) on FIELD_DEFINITION
directive @log on FIELD_DEFINITION
directive @db(entity: String) on OBJECT

# Marketing domain types
type Marketing @params(fields: ["id"]) {
  id: ID
  customers: [MarketingCustomer]
  orders: [MarketingOrder]
  campaigns: [MarketingCampaign]
  leads: [MarketingLead]
  events: [MarketingEvent]
}

type MarketingCustomer @source(file: "data/marketing.customer.json") {
  id: ID!
  name: String
  email: String
  orders: [MarketingOrder]
  leadSource: String
  customerSegment: String
  campaignHistory: [MarketingCampaign]
  totalSpend: Float @deprecated(reason: "Use analytics.customerValue instead")
  leadId: ID
  lead: MarketingLead
}

type MarketingOrder @source(file: "data/marketing.order.json") {
  id: ID!
  total: String
  customerId: ID
  date: String
  customer: MarketingCustomer
  campaignId: ID
  campaign: MarketingCampaign
  items: [MarketingOrderItem]
  status: String
  paymentMethod: String
}

type MarketingOrderItem @source(file: "data/marketing.order.item.json") {
  id: ID!
  orderId: ID!
  order: MarketingOrder
  productName: String
  quantity: Int
  price: Float
  discount: Float
}

type MarketingCampaign @source(file: "data/marketing.campaign.json") {
  id: ID!
  name: String!
  description: String
  startDate: String
  endDate: String
  budget: Float
  status: String
  leads: [MarketingLead]
  events: [MarketingEvent]
  metrics: MarketingCampaignMetrics
  targetSegments: [String]
  owner: String
}

type MarketingLead @source(file: "data/marketing.lead.json") {
  id: ID!
  name: String!
  email: String!
  phone: String
  status: String
  source: String
  score: Int
  lastContactDate: String
  notes: String
  campaignId: ID
  campaign: MarketingCampaign
  convertedToCustomer: Boolean
  customerId: ID
  customer: MarketingCustomer
  assignedTo: String
  qualificationDate: String
}

type MarketingEvent @source(file: "data/marketing.event.json") {
  id: ID!
  name: String!
  description: String
  date: String
  location: String
  campaignId: ID
  campaign: MarketingCampaign
  attendees: [MarketingEventAttendee]
  budget: Float
  virtualEvent: Boolean
  registrationUrl: String
}

type MarketingEventAttendee @source(file: "data/marketing.event.attendee.json") {
  id: ID!
  eventId: ID!
  event: MarketingEvent
  leadId: ID
  lead: MarketingLead
  customerId: ID
  customer: MarketingCustomer
  status: String
  registrationDate: String
  checkInTime: String
  feedback: String
}

type MarketingCampaignMetrics @source(file: "data/marketing.campaign.metrics.json") {
  campaignId: ID!
  impressions: Int
  clicks: Int
  conversions: Int
  roi: Float
  costPerLead: Float
  conversionRate: Float
  emailOpenRate: Float
  emailClickRate: Float
  socialShares: Int
  websiteVisits: Int
}

# Finance domain types
type Finance @params(fields: ["id"]) {
  id: ID
  customers: [FinanceCustomer]
  invoices: [FinanceInvoice]
  transactions: [FinanceTransaction]
}

type FinanceCustomer @source(file: "data/finance.customer.json") {
  id: ID!
  name: String
  email: String
  billingAddress: String
  paymentTerms: String
  creditLimit: Float
  accountStatus: String
  marketingCustomerId: ID
  marketingCustomer: MarketingCustomer
}

type FinanceInvoice @source(file: "data/finance.invoice.json") {
  id: ID!
  customerId: ID!
  customer: FinanceCustomer
  amount: Float!
  date: String!
  dueDate: String!
  status: String
  transactions: [FinanceTransaction]
}

type FinanceTransaction @source(file: "data/finance.transaction.json") {
  id: ID!
  invoiceId: ID
  invoice: FinanceInvoice
  customerId: ID
  customer: FinanceCustomer
  amount: Float!
  date: String!
  type: String!
  status: String
  method: String
}

# External API types
type ExternalAPI {
  customers: [ExternalCustomer] @paginate(defaultLimit: 20)
  products: [ExternalProduct]
  vendors: [ExternalVendor]
}

type ExternalCustomer @api(url: "https://example.com/api/customers") {
  id: ID!
  name: String
  email: String
  externalId: String
  source: String
  marketingCustomerId: ID
  marketingCustomer: MarketingCustomer
}

type ExternalProduct @api(url: "https://example.com/api/products") {
  id: ID!
  name: String!
  price: Float
  description: String
  category: String
  inStock: Boolean
}

type ExternalVendor @api(url: "https://example.com/api/vendors") {
  id: ID!
  name: String!
  contactEmail: String
  contactPhone: String
  products: [ExternalProduct]
}

# Metadata type for system information
type Metadata {
  types: [TypeInfo]
  namespaces: [NamespaceInfo]
  relationships: [RelationshipInfo]
  directives: [DirectiveInfo]
  version: String
  lastUpdated: String
}

# Supporting types for metadata
type TypeInfo {
  name: String!
  namespace: String
  fields: [FieldInfo]
  source: SourceInfo
  recordCount: Int
  relationships: [RelationshipInfo]
}

type FieldInfo {
  name: String!
  type: String!
  required: Boolean
  isList: Boolean
  isScalar: Boolean
  directives: [String]
}

type SourceInfo {
  type: String!
  path: String
  url: String
  lastUpdated: String
  recordCount: Int
}

type NamespaceInfo {
  name: String!
  types: [String]
  description: String
}

type RelationshipInfo {
  sourceType: String!
  fieldName: String!
  targetType: String!
  isList: Boolean
  foreignKey: String
}

type DirectiveInfo {
  typeName: String!
  directive: String!
  value: String
}

# Analytics domain for aggregated data and insights
type Analytics @params(fields: ["id"]) {
  id: ID
  customerAnalytics: [CustomerAnalytics]
  campaignPerformance: [CampaignPerformance]
  salesTrends: [SalesTrend]
}

type CustomerAnalytics @source(file: "data/analytics.customer.json") {
  customerId: ID!
  customer: MarketingCustomer
  lifetime_value: Float
  purchase_frequency: Float
  last_activity_date: String
  engagement_score: Int
  churn_risk: Float
  segment: String
}

type CampaignPerformance @source(file: "data/analytics.campaign.json") {
  campaignId: ID!
  campaign: MarketingCampaign
  spend: Float
  revenue: Float
  roi: Float
  conversions: Int
  cost_per_acquisition: Float
  engagement_rate: Float
}

type SalesTrend @source(file: "data/analytics.sales.json") {
  id: ID!
  period: String!
  revenue: Float!
  growth_rate: Float
  top_products: [String]
  top_campaigns: [ID]
}

# HR domain for database-sourced employee data
type HR @params(fields: ["id"]) {
  id: ID
  employees: [Employee] @paginate(defaultLimit: 20)
}

# Employee type sourced from PostgreSQL database
type Employee @db(entity: "org.example.entity.Employee") {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  department: String
  position: String
  hireDate: String
  salary: Float
}

# Root query type to define entry points
type Query {
  marketing: Marketing
  finance: Finance
  external: ExternalAPI
  metadata: Metadata
  analytics: Analytics @auth(requires: "ROLE_ANALYST")
  hr: HR

  # Convenience direct access to collections
  marketingCustomers: [MarketingCustomer] @paginate
  marketingOrders: [MarketingOrder] @paginate
  marketingCampaigns: [MarketingCampaign] @paginate
  marketingLeads: [MarketingLead] @paginate
  marketingEvents: [MarketingEvent] @paginate
  financeCustomers: [FinanceCustomer] @paginate
  financeInvoices: [FinanceInvoice] @paginate
  financeTransactions: [FinanceTransaction] @paginate
  externalCustomers: [ExternalCustomer] @paginate
  externalProducts: [ExternalProduct] @paginate
  employees: [Employee] @paginate(defaultLimit: 20)

  # Search functionality
  search(term: String!, types: [String]): [SearchResult] @log
}

# Type for search results across domains
type SearchResult {
  typeName: String!
  record: String!  # JSON stringified record
  highlights: [String]
  score: Float
}
